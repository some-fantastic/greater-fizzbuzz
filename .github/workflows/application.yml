name: "Fetch and apply approved patch"

on:
  workflow_dispatch:
    inputs:
      #
      # for non-demo usage, you should would comment out the run-id input and instead use an input that'd uniquely identify
      # the patch from your system to hold approved artifacts. as this is a demo between GHEC and GHEC, we're using the run-id.
      #
      # for a private demo using self-hosted GitHub in network isolation, please contact your GitHub sales team or use the link below.
      # https://github.com/enterprise/contact
      #
      patch-sha:
        description: "SHA of the patch to apply"
        required: true
        type: string
      run-id:
        description: "Run ID from lesser-fizzbuzz. For real usage, change to the download URL instead."
        required: true
        type: string

jobs:
  apply-approved-patch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    #
    # for real usage, `runs-on` would be a self-hosted runner with the following installed
    # - git
    # - github cli
    # - (usually) an antivirus program
    #
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          ref: main # explicitly using the default branch

      - name: Fetch the zipped patch file
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.READ_ORG }}
        run: |
          # list workflow run artifacts
          # https://docs.github.com/en/enterprise-cloud@latest/rest/actions/artifacts?apiVersion=2022-11-28
          URL=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --hostname github.com \
            /repos/some-fantastic/lesser-fizzbuzz/actions/runs/${{ github.event.inputs.run-id }}/artifacts | \
            jq -r '.artifacts[].archive_download_url')
          curl -H "Authorization: token ${{ secrets.READ_ORG }}" -L -o patch.zip $URL

      - name: Do the antivirus stuff (again)
        shell: bash
        run: |
          # install clamav (this'll already be installed on a self-hosted runner for this task)
          sudo apt-get update
          sudo apt-get install clamav -y
          sudo systemctl stop clamav-freshclam
          sudo freshclam

          # scan the patch
          sudo clamscan patch.zip

      - name: Unzip patch artifact
        shell: bash
        run: |
          unzip patch.zip
          rm patch.zip

      - name: Set up git
        shell: bash
        run: |
          git config --global user.email "patchpromotion@mail.tld"
          git config --global user.name "Patch Promotion [bot]"

      - name: Apply patch to new branch
        shell: bash
        run: |
          # create patch branch
          git checkout -b patch-${{ github.event.inputs.patch-sha }}

          # apply patch
          git apply ${{ github.event.inputs.patch-sha }}.patch

          # delete patch file
          rm ${{ github.event.inputs.patch-sha }}.patch

      - name: Commit and push to new branch
        shell: bash
        run: |
          git add .
          git commit -m "Apply patch ${{ github.event.inputs.patch-sha }}"
          git push --set-upstream origin patch-${{ github.event.inputs.patch-sha }}

      - name: Create pull request
        shell: bash
        env:
          GH_ENTERPRISE_TOKEN: ${{ github.token }}
          GH_HOST: $( echo ${{ github.server_url }} | sed 's/https:\/\///g')
        run: |
          gh pr create --base main --head patch-${{ github.event.inputs.patch-sha }} \
            --title "Apply patch ${{ github.event.inputs.patch-sha }}" \
            --body "Apply patch ${{ github.event.inputs.patch-sha }}"

  create-failure-issue:
    runs-on: ubuntu-latest
    needs: apply-approved-patch
    if: ${{ failure() }}
    permissions:
      contents: read
      issues: write
    #
    # for real usage, `runs-on` would be a self-hosted runner with the following installed
    # - git
    # - github cli
    # - (usually) an antivirus program
    #
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create tracking issue
        shell: bash
        env:
          GH_ENTERPRISE_TOKEN: ${{ github.token }}
          GH_HOST: $( echo ${{ github.server_url }} | sed 's/https:\/\///g')
        run: |
          if [[ ${{ github.server_url}} != "https://github.com" ]]
          then
            gh auth login --hostname $(echo ${{ github.server_url }} | sed 's/https:\/\///g')
          fi
          gh issue create -R some-fantastic/greater-fizzbuzz \
            --title "Patch ${{ github.event.inputs.patch-sha }}" \
            --body "Patch ${{ github.event.inputs.patch-sha }} has failed to be applied to the main branch. \
            Please review!"
